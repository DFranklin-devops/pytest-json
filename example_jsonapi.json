{
  "included": [
    {
      "type": "test",
      "attributes": {
        "setup": {
          "duration": 0.0003228187561035156,
          "name": "setup",
          "outcome": "error",
          "longrepr": "request = <SubRequest 'fail_setup_fixture' for <Function 'test_fail_during_setup'>>\n\n    @pytest.fixture\n    def fail_setup_fixture(request):\n>       assert 1 == 3\nE       assert 1 == 3\n\ntest_report.py:13: AssertionError"
        },
        "duration": 0.0007288455963134766,
        "name": "test_report.py::test_fail_during_setup",
        "teardown": {
          "duration": 8.320808410644531e-05,
          "name": "teardown",
          "outcome": "passed"
        },
        "outcome": "error"
      },
      "id": 1
    },
    {
      "type": "test",
      "attributes": {
        "duration": 0.0011370182037353516,
        "outcome": "failed",
        "setup": {
          "stdout": "setting up\n",
          "duration": 0.00027060508728027344,
          "name": "setup",
          "outcome": "passed"
        },
        "name": "test_report.py::test_fail_with_fixture",
        "teardown": {
          "stdout": "tearing down\n",
          "duration": 0.000171661376953125,
          "name": "teardown",
          "outcome": "passed"
        },
        "call": {
          "stdout": "call str 2\n",
          "duration": 0.0004241466522216797,
          "name": "call",
          "outcome": "failed",
          "longrepr": "setup_teardown_fixture = None\n\n    def test_fail_with_fixture(setup_teardown_fixture):\n        print('call str 2')\n>       assert 1 == 2\nE       assert 1 == 2\n\ntest_report.py:28: AssertionError"
        }
      },
      "id": 2
    },
    {
      "type": "test",
      "attributes": {
        "duration": 0.0009024143218994141,
        "outcome": "xfailed",
        "setup": {
          "duration": 0.0002899169921875,
          "name": "setup",
          "outcome": "passed"
        },
        "name": "test_report.py::test_xfailed",
        "teardown": {
          "duration": 7.796287536621094e-05,
          "name": "teardown",
          "outcome": "passed"
        },
        "call": {
          "duration": 0.0002446174621582031,
          "xfail_reason": "testing xfail",
          "outcome": "xfailed",
          "longrepr": "@pytest.mark.xfail(reason='testing xfail')\n    def test_xfailed():\n        print('I am xfailed')\n>       assert 1 == 2\nE       assert 1 == 2\n\ntest_report.py:33: AssertionError",
          "stdout": "I am xfailed\n",
          "name": "call"
        }
      },
      "id": 3
    },
    {
      "type": "test",
      "attributes": {
        "setup": {
          "duration": 0.00010347366333007812,
          "name": "setup",
          "outcome": "skipped",
          "longrepr": "('test_report.py', 47, 'Skipped: testing skip')"
        },
        "duration": 0.0002758502960205078,
        "name": "test_report.py::test_skipped",
        "teardown": {
          "duration": 6.890296936035156e-05,
          "name": "teardown",
          "outcome": "passed"
        },
        "outcome": "skipped"
      },
      "id": 4
    },
    {
      "type": "test",
      "attributes": {
        "duration": 0.0007717609405517578,
        "outcome": "error",
        "setup": {
          "duration": 0.00024199485778808594,
          "name": "setup",
          "outcome": "passed"
        },
        "name": "test_report.py::test_fail_during_teardown",
        "teardown": {
          "duration": 0.0001709461212158203,
          "name": "teardown",
          "outcome": "error",
          "longrepr": "def fn():\n>       assert 1 == 3\nE       assert 1 == 3\n\ntest_report.py:18: AssertionError"
        },
        "call": {
          "stdout": "I will fail during teardown\n",
          "duration": 0.00011682510375976562,
          "name": "call",
          "outcome": "passed"
        }
      },
      "id": 5
    },
    {
      "type": "test",
      "attributes": {
        "duration": 0.0005490779876708984,
        "outcome": "xpassed",
        "setup": {
          "duration": 0.0001881122589111328,
          "name": "setup",
          "outcome": "passed"
        },
        "name": "test_report.py::test_xfailed_but_passing",
        "teardown": {
          "duration": 6.794929504394531e-05,
          "name": "teardown",
          "outcome": "passed"
        },
        "call": {
          "stdout": "I am xfailed but passing\n",
          "duration": 0.0001049041748046875,
          "name": "call",
          "outcome": "xpassed",
          "xfail_reason": "testing xfail"
        }
      },
      "id": 6
    },
    {
      "type": "test",
      "attributes": {
        "duration": 0.000820159912109375,
        "outcome": "passed",
        "setup": {
          "duration": 0.0002956390380859375,
          "name": "setup",
          "outcome": "passed"
        },
        "name": "test_report.py::test_basic",
        "teardown": {
          "duration": 9.369850158691406e-05,
          "name": "teardown",
          "outcome": "passed"
        },
        "call": {
          "stdout": "call str\n",
          "duration": 0.00013518333435058594,
          "name": "call",
          "outcome": "passed"
        }
      },
      "id": 7
    }
  ],
  "data": [
    {
      "type": "report",
      "attributes": {
        "environment": {
          "Platform": "Linux-3.5.0-40-generic-x86_64-with-Ubuntu-12.04-precise",
          "Python": "3.5.1"
        },
        "summary": {
          "passed": 2,
          "duration": 0.03072643280029297,
          "failed": 1,
          "error": 2,
          "num_tests": 7,
          "xpassed": 1,
          "xfailed": 1,
          "skipped": 1
        },
        "created_at": "2015-12-31 16:29:26.072432"
      },
      "id": 1,
      "relationships": {
        "tests": {
          "data": [
            {"type": "test", "id": 1},
            {"type": "test", "id": 2},
            {"type": "test", "id": 3},
            {"type": "test", "id": 4},
            {"type": "test", "id": 5},
            {"type": "test", "id": 6},
            {"type": "test", "id": 7}
          ]
        }
      }
    }
  ]
}
