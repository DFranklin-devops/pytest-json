{
  "report": {
    "summary": {
      "error": 2,
      "num_tests": 7,
      "passed": 2,
      "failed": 1,
      "xpassed": 1,
      "xfailed": 1,
      "skipped": 1,
      "duration": 0.039363861083984375
    },
    "created_at": "2015-12-27 18:23:41.732428",
    "tests": [
      {
        "outcome": "skipped",
        "teardown": {
          "duration": 8.0108642578125e-05,
          "name": "teardown",
          "outcome": "passed"
        },
        "duration": 0.00034427642822265625,
        "name": "test_report.py::test_skipped",
        "setup": {
          "longrepr": "('test_report.py', 47, 'Skipped: testing skip')",
          "duration": 0.00013208389282226562,
          "name": "setup",
          "outcome": "skipped"
        }
      },
      {
        "call": {
          "Captured stdout call": "call str\n",
          "duration": 0.00015544891357421875,
          "name": "call",
          "outcome": "passed"
        },
        "name": "test_report.py::test_basic",
        "setup": {
          "duration": 0.00033783912658691406,
          "name": "setup",
          "outcome": "passed"
        },
        "duration": 0.0009164810180664062,
        "outcome": "passed",
        "teardown": {
          "duration": 8.535385131835938e-05,
          "name": "teardown",
          "outcome": "passed"
        }
      },
      {
        "call": {
          "Captured stdout call": "I am xfailed\n",
          "longrepr": "@pytest.mark.xfail(reason='testing xfail')\n    def test_xfailed():\n        print('I am xfailed')\n>       assert 1 == 2\nE       assert 1 == 2\n\ntest_report.py:33: AssertionError",
          "name": "call",
          "outcome": "xfailed",
          "duration": 0.0002739429473876953,
          "xfail_reason": "testing xfail"
        },
        "name": "test_report.py::test_xfailed",
        "setup": {
          "duration": 0.00023818016052246094,
          "name": "setup",
          "outcome": "passed"
        },
        "duration": 0.0008389949798583984,
        "outcome": "xfailed",
        "teardown": {
          "duration": 8.869171142578125e-05,
          "name": "teardown",
          "outcome": "passed"
        }
      },
      {
        "call": {
          "Captured stdout call": "I will fail during teardown\n",
          "duration": 0.0001380443572998047,
          "name": "call",
          "outcome": "passed"
        },
        "name": "test_report.py::test_fail_during_teardown",
        "setup": {
          "duration": 0.00029730796813964844,
          "name": "setup",
          "outcome": "passed"
        },
        "duration": 0.0009043216705322266,
        "outcome": "error",
        "teardown": {
          "longrepr": "def fn():\n>       assert 1 == 3\nE       assert 1 == 3\n\ntest_report.py:18: AssertionError",
          "duration": 0.000171661376953125,
          "name": "teardown",
          "outcome": "error"
        }
      },
      {
        "call": {
          "Captured stdout call": "call str 2\n",
          "longrepr": "setup_teardown_fixture = None\n\n    def test_fail_with_fixture(setup_teardown_fixture):\n        print('call str 2')\n>       assert 1 == 2\nE       assert 1 == 2\n\ntest_report.py:28: AssertionError",
          "duration": 0.0004546642303466797,
          "name": "call",
          "outcome": "failed"
        },
        "name": "test_report.py::test_fail_with_fixture",
        "setup": {
          "Captured stdout setup": "setting up\n",
          "duration": 0.0002918243408203125,
          "name": "setup",
          "outcome": "passed"
        },
        "duration": 0.0012547969818115234,
        "outcome": "failed",
        "teardown": {
          "Captured stdout teardown": "tearing down\n",
          "duration": 0.00021648406982421875,
          "name": "teardown",
          "outcome": "passed"
        }
      },
      {
        "outcome": "error",
        "teardown": {
          "duration": 0.00010442733764648438,
          "name": "teardown",
          "outcome": "passed"
        },
        "duration": 0.001739501953125,
        "name": "test_report.py::test_fail_during_setup",
        "setup": {
          "longrepr": "request = <SubRequest 'fail_setup_fixture' for <Function 'test_fail_during_setup'>>\n\n    @pytest.fixture\n    def fail_setup_fixture(request):\n>       assert 1 == 3\nE       assert 1 == 3\n\ntest_report.py:13: AssertionError",
          "duration": 0.0008175373077392578,
          "name": "setup",
          "outcome": "error"
        }
      },
      {
        "call": {
          "xfail_reason": "testing xfail",
          "Captured stdout call": "I am xfailed but passing\n",
          "duration": 0.00011730194091796875,
          "name": "call",
          "outcome": "xpassed"
        },
        "name": "test_report.py::test_xfailed_but_passing",
        "setup": {
          "duration": 0.00022864341735839844,
          "name": "setup",
          "outcome": "passed"
        },
        "duration": 0.0006492137908935547,
        "outcome": "xpassed",
        "teardown": {
          "duration": 7.462501525878906e-05,
          "name": "teardown",
          "outcome": "passed"
        }
      }
    ],
    "environment": {
      "Python": "3.5.1",
      "Platform": "Linux-3.5.0-40-generic-x86_64-with-Ubuntu-12.04-precise"
    }
  }
}
