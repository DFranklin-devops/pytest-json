{
  "created_at": "2015-12-27 17:18:07.523963",
  "summary": {
    "error": 2,
    "duration": 0.03420710563659668,
    "failed": 1,
    "xfailed": 1,
    "passed": 2,
    "skipped": 1,
    "num_tests": 7,
    "xpassed": 1
  },
  "tests": [
    {
      "duration": 0.00030159950256347656,
      "outcome": "skipped",
      "name": "test_report.py::test_skipped",
      "teardown": {
        "duration": 7.081031799316406e-05,
        "outcome": "passed",
        "name": "teardown"
      },
      "setup": {
        "longrepr": "('test_report.py', 47, 'Skipped: testing skip')",
        "duration": 0.00011539459228515625,
        "outcome": "skipped",
        "name": "setup"
      }
    },
    {
      "duration": 0.0011203289031982422,
      "outcome": "failed",
      "call": {
        "longrepr": "setup_teardown_fixture = None\n\n    def test_fail_with_fixture(setup_teardown_fixture):\n        print('call str 2')\n>       assert 1 == 2\nE       assert 1 == 2\n\ntest_report.py:28: AssertionError",
        "duration": 0.0004189014434814453,
        "outcome": "failed",
        "name": "call",
        "Captured stdout call": "call str 2\n"
      },
      "teardown": {
        "duration": 0.00012159347534179688,
        "outcome": "passed",
        "name": "teardown",
        "Captured stdout teardown": "tearing down\n"
      },
      "name": "test_report.py::test_fail_with_fixture",
      "setup": {
        "Captured stdout setup": "setting up\n",
        "duration": 0.0002899169921875,
        "outcome": "passed",
        "name": "setup"
      }
    },
    {
      "duration": 0.000736236572265625,
      "outcome": "error",
      "name": "test_report.py::test_fail_during_setup",
      "teardown": {
        "duration": 7.009506225585938e-05,
        "outcome": "passed",
        "name": "teardown"
      },
      "setup": {
        "longrepr": "request = <SubRequest 'fail_setup_fixture' for <Function 'test_fail_during_setup'>>\n\n    @pytest.fixture\n    def fail_setup_fixture(request):\n>       assert 1 == 3\nE       assert 1 == 3\n\ntest_report.py:13: AssertionError",
        "duration": 0.0003330707550048828,
        "outcome": "error",
        "name": "setup"
      }
    },
    {
      "duration": 0.0007405281066894531,
      "outcome": "xfailed",
      "call": {
        "duration": 0.0002505779266357422,
        "outcome": "xfailed",
        "name": "call",
        "longrepr": "@pytest.mark.xfail(reason='testing xfail')\n    def test_xfailed():\n        print('I am xfailed')\n>       assert 1 == 2\nE       assert 1 == 2\n\ntest_report.py:33: AssertionError",
        "xfail_reason": "testing xfail",
        "Captured stdout call": "I am xfailed\n"
      },
      "teardown": {
        "duration": 8.034706115722656e-05,
        "outcome": "passed",
        "name": "teardown"
      },
      "name": "test_report.py::test_xfailed",
      "setup": {
        "duration": 0.0002048015594482422,
        "outcome": "passed",
        "name": "setup"
      }
    },
    {
      "duration": 0.0005960464477539062,
      "outcome": "xpassed",
      "call": {
        "xfail_reason": "testing xfail",
        "duration": 0.00010561943054199219,
        "outcome": "xpassed",
        "name": "call",
        "Captured stdout call": "I am xfailed but passing\n"
      },
      "teardown": {
        "duration": 6.842613220214844e-05,
        "outcome": "passed",
        "name": "teardown"
      },
      "name": "test_report.py::test_xfailed_but_passing",
      "setup": {
        "duration": 0.0002110004425048828,
        "outcome": "passed",
        "name": "setup"
      }
    },
    {
      "duration": 0.0007679462432861328,
      "outcome": "error",
      "call": {
        "duration": 0.00011730194091796875,
        "outcome": "passed",
        "name": "call",
        "Captured stdout call": "I will fail during teardown\n"
      },
      "teardown": {
        "longrepr": "def fn():\n>       assert 1 == 3\nE       assert 1 == 3\n\ntest_report.py:18: AssertionError",
        "duration": 0.00016045570373535156,
        "outcome": "error",
        "name": "teardown"
      },
      "name": "test_report.py::test_fail_during_teardown",
      "setup": {
        "duration": 0.00024509429931640625,
        "outcome": "passed",
        "name": "setup"
      }
    },
    {
      "duration": 0.001043558120727539,
      "outcome": "passed",
      "call": {
        "duration": 0.00016736984252929688,
        "outcome": "passed",
        "name": "call",
        "Captured stdout call": "call str\n"
      },
      "teardown": {
        "duration": 8.654594421386719e-05,
        "outcome": "passed",
        "name": "teardown"
      },
      "name": "test_report.py::test_basic",
      "setup": {
        "duration": 0.0003948211669921875,
        "outcome": "passed",
        "name": "setup"
      }
    }
  ],
  "environment": {
    "Platform": "Linux-3.5.0-40-generic-x86_64-with-Ubuntu-12.04-precise",
    "Python": "3.5.1"
  }
}
