{
  "summary": {
    "num_tests": 7,
    "error": 2,
    "xpassed": 1,
    "passed": 2,
    "skipped": 1,
    "xfailed": 1,
    "failed": 1,
    "duration": 0.0315709114074707
  },
  "environment": {
    "Python": "3.5.1",
    "Platform": "Linux-3.5.0-40-generic-x86_64-with-Ubuntu-12.04-precise"
  },
  "created_at": "2015-12-26 15:00:21.287352",
  "tests": {
    "test_report.py::test_fail_with_fixture": {
      "setup": {
        "outcome": "passed",
        "Captured stdout setup": "setting up\n",
        "duration": 0.0002722740173339844
      },
      "teardown": {
        "outcome": "passed",
        "Captured stdout teardown": "tearing down\n",
        "duration": 0.00011587142944335938
      },
      "call": {
        "Captured stdout call": "call str 2\n",
        "outcome": "failed",
        "longrepr": "setup_teardown_fixture = None\n\n    def test_fail_with_fixture(setup_teardown_fixture):\n        print('call str 2')\n>       assert 1 == 2\nE       assert 1 == 2\n\ntest_report.py:28: AssertionError",
        "duration": 0.00043129920959472656
      }
    },
    "test_report.py::test_skipped": {
      "setup": {
        "outcome": "skipped",
        "longrepr": "('test_report.py', 47, 'Skipped: testing skip')",
        "duration": 0.00010776519775390625
      },
      "teardown": {
        "outcome": "passed",
        "duration": 7.05718994140625e-05
      }
    },
    "test_report.py::test_fail_during_teardown": {
      "setup": {
        "outcome": "passed",
        "duration": 0.00028133392333984375
      },
      "teardown": {
        "outcome": "error",
        "longrepr": "def fn():\n>       assert 1 == 3\nE       assert 1 == 3\n\ntest_report.py:18: AssertionError",
        "duration": 0.00016260147094726562
      },
      "call": {
        "Captured stdout call": "I will fail during teardown\n",
        "outcome": "passed",
        "duration": 0.00011730194091796875
      }
    },
    "test_report.py::test_fail_during_setup": {
      "setup": {
        "outcome": "error",
        "longrepr": "request = <SubRequest 'fail_setup_fixture' for <Function 'test_fail_during_setup'>>\n\n    @pytest.fixture\n    def fail_setup_fixture(request):\n>       assert 1 == 3\nE       assert 1 == 3\n\ntest_report.py:13: AssertionError",
        "duration": 0.0003516674041748047
      },
      "teardown": {
        "outcome": "passed",
        "duration": 7.224082946777344e-05
      }
    },
    "test_report.py::test_xfailed": {
      "setup": {
        "outcome": "passed",
        "duration": 0.0002110004425048828
      },
      "teardown": {
        "outcome": "passed",
        "duration": 0.00010800361633300781
      },
      "call": {
        "xfail_reason": "testing xfail",
        "Captured stdout call": "I am xfailed\n",
        "outcome": "xfailed",
        "longrepr": "@pytest.mark.xfail(reason='testing xfail')\n    def test_xfailed():\n        print('I am xfailed')\n>       assert 1 == 2\nE       assert 1 == 2\n\ntest_report.py:33: AssertionError",
        "duration": 0.0002357959747314453
      }
    },
    "test_report.py::test_xfailed_but_passing": {
      "setup": {
        "outcome": "passed",
        "duration": 0.00019359588623046875
      },
      "teardown": {
        "outcome": "passed",
        "duration": 6.842613220214844e-05
      },
      "call": {
        "xfail_reason": "testing xfail",
        "Captured stdout call": "I am xfailed but passing\n",
        "outcome": "xpassed",
        "duration": 0.00010561943054199219
      }
    },
    "test_report.py::test_basic": {
      "setup": {
        "outcome": "passed",
        "duration": 0.0003001689910888672
      },
      "teardown": {
        "outcome": "passed",
        "duration": 7.891654968261719e-05
      },
      "call": {
        "Captured stdout call": "call str\n",
        "outcome": "passed",
        "duration": 0.0001366138458251953
      }
    }
  }
}
